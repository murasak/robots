{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","console","log","components_CounterButton","MainPage","filterRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","_this$props","onSearchChange","isPending","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","App","src_components_MainPage","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.222594e3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {robots().map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={user.id}\n                        name={user.name}\n                        email={user.email}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robot'\n            onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops, Thai is not good</h1>\n        }\n\n        return this.props.children;\n    }\n    \n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n        /**\n         * Better than this.setState({count: count+1})\n         */\n    }\n\n    render() {\n        // console.log('BUTTON')\n        return (\n            <button id='counter' color={this.props.color} onClick={this.updateCount}>\n                Count:{this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    \n    render() {\n        console.log('HEADER')\n        return (\n            <div>\n                <h1 className='f1'>RobotFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBountry from '../components/ErrorBoundry';\nimport './MainPage.css';\n\nimport Header from '../components/Header'\n\n\nclass MainPage extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    filterRobots = () => {\n        return this.props.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n        })\n    }\n    render() {\n        const { onSearchChange, isPending } = this.props;\n        return isPending?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBountry>\n                            <CardList robots={this.filterRobots} />\n                        </ErrorBountry>\n                    </Scroll>\n\n                </div>\n            )\n    }\n\n\n}\nexport default MainPage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './app.css';\n\nimport { setSearchField, requestRobots } from '../action';\nimport MainPage from '../components/MainPage';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        // onRequestRobots: () => requestRobots(dispatch)\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    render() {\n       return <MainPage {...this.props }/>\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants';\n\n/**\n *  Redux with NO redux-thunk: Sync funciton\n * */  \nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\n/**\n * With redux-thunk: To deal with Async function\n */\n// export const requestRobots = (dispatch) => {\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then(res => {return res.json();})\n            .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n            .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            // return Object.assign({}, state, {searchField: action.payload});\n            return {...state, searchField: action.payload};\n        default:\n            return state;\n        }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return {...state, robots: action.payload, isPending: false};\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false};\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}